openapi: "3.0.0"
info:
  title: Simple API overview
  version: 2.0.0
paths:
  /login:
    post:
      summary: Return JWT token
      operationId: auth.generate_token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email of the user
                password:
                  type: string
                  description: Password of the user
      responses:
        '200':
          description: JWT token
          content:
            'text/plain':
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'   
        '404':
          $ref: '#/components/responses/NotFound'    
        '5XX':
          description: Unexpected error.

  /users:
    post:
      operationId: user.create
      summary: Create an user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fname:
                  type: string
                  description: First name of the user
                lname:
                  type: string
                  description: Last name of the user
                email:
                  type: string
                  description: email of the user
                password:
                  type: string
                  description: password of the user
      responses:
        '200':
          description: >-
            The user has been created
          content:
            application/json:
              schema:
                type: object
                items:
                  properties:
                    user_id:
                      type: string
                      description: Id of the user
                    fname:
                      type: string
                      description: First name of the user
                    lname:
                      type: string
                      description: Last name of the user
                    email:
                      type: string
                      description: email of the user
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /users/{user_id}:
    get:
      security:
        - bearerAuth: []
      operationId: user.get_user
      summary: Get a particular user
      parameters:
        - name: user_id
          in: path
          description: 'Id of the user'
          required: true
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: >-
            The user has been read
          content:
            application/json:
              schema:
                type: object
                items:
                  properties:
                    user_id:
                      type: string
                      description: Id of the image
                    fname:
                      type: string
                      description: first name of the user
                    lname:
                      type: string
                      description: last name of the user
                    images:
                      type: array
                      description: Array of the images
                      items:
                        properties:
                          image_id:
                            type: string
                            description: Id of the image
                          user_id:
                            type: string
                            description: Id of the image
                          image:
                            type: string
                            description: url of the image
                          timestamp:
                            type: string
                            description: Creation/Update timestamp of the image
                    timestamp:
                      type: string
                      description: Creation/Update timestamp of the image
        '401':
          $ref: '#/components/responses/UnauthorizedError'              
  /users/{user_id}/images:
    get:
      security:
        - bearerAuth: []
      operationId: image.read_images
      summary: Reading a list  of images
      parameters:
        - name: user_id
          in: path
          description: 'Id of the user'
          required: true
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: >-
            The images have been read
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    image_id:
                      type: string
                      description: Id of the image
                    user_id:
                      type: string
                      description: Id of the image
                    image:
                      type: string
                      description: url of the image
                    timestamp:
                      type: string
                      description: Creation/Update timestamp of the image
        '401':
          $ref: '#/components/responses/UnauthorizedError'              
    post:
      security:
        - bearerAuth: []
      operationId: image.upload
      summary: Uploading a list  of images
      parameters:
        - name: user_id
          in: path
          description: 'Id of the user'
          required: true
          example: 1
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                    type: string
                    format: binary
      responses:
        '200':
          description: >-
            The images have been uploaded
          content:
            application/json:
              schema:
                type: integer
        '404':
          description: >-
            The set of images cant be uploaded 
          content:
            application/json:
              schema:
                type: integer 
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /users/{user_id}/images/{image_id}:
    # get:
    #   security:
    #     - bearerAuth: []
    #   operationId: image.get_access
    #   summary: Access of an image
    #   parameters:
    #     - name: user_id
    #       in: path
    #       description: 'Id of the user'
    #       required: true
    #       example: 1
    #       schema:
    #         type: integer
    #     - name: image_id
    #       in: path
    #       description: 'Id of the user'
    #       required: true
    #       example: 1
    #       schema:
    #         type: integer
    #     - in: query
    #       name: email
    #       description: email of the user
    #       schema:
    #         type: string
    #   responses:
    #       '200':
    #         description: >-
    #           The images have been uploaded
    #         content:
    #           application/json:
    #             schema:
    #               type: object
    #               items:
    #                 properties:
    #                   user_id:
    #                     type: string
    #                     description: Id of the user
    #                   image_id:
    #                     type: string
    #                     description: Id of the image
    #                   permission_id:
    #                     type: string
    #                     description: Id of the permission
    #                   timestamp:
    #                         type: string
    #                         description: Creation/Update timestamp of the permission
    #       '404':
    #         description: >-
    #           The image and user could not be found
    #         content:
    #           application/json:
    #             schema:
    #               type: integer 
    #       '401':
    #         $ref: '#/components/responses/UnauthorizedError'
      

    post:
      security:
        - bearerAuth: []
      operationId: image.create_access
      summary: Access of an image
      parameters:
        - name: user_id
          in: path
          description: 'Id of the user'
          required: true
          example: 1
          schema:
            type: integer
        - name: image_id
          in: path
          description: 'Id of the user'
          required: true
          example: 1
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: email of the user
      responses:
        '200':
          description: >-
            The images have been uploaded
          content:
            application/json:
              schema:
                type: integer
        '404':
          description: >-
            The set of images cant be uploaded 
          content:
            application/json:
              schema:
                type: integer 
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      security:
        - bearerAuth: []
      operationId: image.delete_image
      summary: Delete an image
      description: Delete an image
      parameters:
        - name: image_id
          in: path
          description: 'Id of the image'
          required: true
          example: 1
          schema:
            type: integer
        - name: user_id
          in: path
          description: 'Id of the user'
          required: true
          example: 1
          schema:
            type: integer
      responses:
        '204':
          description: Successfully deleted an image
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  
  

# 1) Define the security scheme type (HTTP bearer)
components:
  schemas:
    GeneralError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

  responses:
    UnauthorizedError:
      description: Unauthorized
    NotFound:
      description: The specified resource was not found
    BadRequest:
      description: Illegal Inputs provided
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
        
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
      x-bearerInfoFunc: auth.decode_token
