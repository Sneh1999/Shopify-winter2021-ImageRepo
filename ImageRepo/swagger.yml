openapi: "3.0.0"
info:
  title: Simple API overview
  version: 2.0.0
paths:
  /login:
    post:
      summary: Return JWT token
      description: This helps in creating a JWT token based on the email and password defined by the user.You can only login after you have created a user using  ( POST {/users}).(Copy and paste the JWT token generated to the Swagger UI authorize button to get authorization). 
      operationId: auth.generate_token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email of the user
                password:
                  type: string
                  description: Password of the user
      responses:
        '200':
          description: JWT token
          content:
            'text/plain':
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'   
        '404':
          $ref: '#/components/responses/NotFound'    
        '5XX':
          description: Unexpected error.

  /users:
    post:
      operationId: user.create
      summary: Create an user
      description: This helps in creating a new user based on the details provided in the request body
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fname:
                  type: string
                  description: First name of the user
                lname:
                  type: string
                  description: Last name of the user
                email:
                  type: string
                  description: Email of the user
                password:
                  type: string
                  description: Password of the user
      responses:
        '200':
          description: >-
            The user has been created
          content:
            application/json:
              schema:
                type: object
                items:
                  properties:
                    id:
                      type: string
                      description: Id of the user
                    fname:
                      type: string
                      description: First name of the user
                    lname:
                      type: string
                      description: Last name of the user
                    email:
                      type: string
                      description: email of the user
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'    
        '5XX':
          description: Unexpected error.
    get:
      operationId: user.get_users
      summary: Get users
      description: This helps the admin get a list of all the users.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: >-
            List of all the users
          content:
            application/json:
              schema:
                type: array
                items:
                    type: object
                    properties:
                      id:
                        type: string
                        description: Id of the user
                      fname:
                        type: string
                        description: First name of the user
                      lname:
                        type: string
                        description: Last name of the user
                      email:
                        type: string
                        description: email of the user
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'    
        '5XX':
          description: Unexpected error.
    
  /users/{user_id}:
    get:
      security:
        - bearerAuth: []
      operationId: user.get_user
      summary: Get a particular user
      description: This helps in getting the details of one particular user.This is only accessible by the user  itself and the admin
      parameters:
        - name: user_id
          in: path
          description: 'Id of the user'
          required: true
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: >-
            The user has been read
          content:
            application/json:
              schema:
                type: object
                items:
                  properties:
                    user_id:
                      type: string
                      description: Id of the image
                    fname:
                      type: string
                      description: First name of the user
                    lname:
                      type: string
                      description: Last name of the user
                    images:
                      type: array
                      description: Array of the image ids
                      items:
                        properties:
                          id:
                            type: string
                            description: Id of the image
                          image:
                            type: string
                            description: name of the image
                          download_token:
                            type: string
                            description: Download token for the image
                          timestamp:
                            type: string
                            description: Creation/Update timestamp of the image
                    timestamp:
                      type: string
                      description: Creation/Update timestamp of the image
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'    
        '5XX':
          description: Unexpected error.
    put:
      security:
        - bearerAuth: []
      operationId: user.put_user
      summary: Ammend a user
      description: This helps in ammending the user details.This can be acessed by only the authorized user and the admin
      parameters:
        - name: user_id
          in: path
          description: 'Id of the user'
          required: true
          example: 1
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Email of the user
                fname:
                  type: string
                  description: First name of the user
                lname:
                  type: string
                  description: Last name of the user
      responses:
        '200':
          description: >-
            The images have been uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    description: Email of the user
                  fname:
                    type: string
                    description: First name of the user
                  lname:
                    type: string
                    description: Last name of the user
                  
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'    
        '5XX':
          description: Unexpected error.
      
    delete:
      security:
        - bearerAuth: []
      operationId: user.delete_user
      summary: Delete a user
      description: Helps in deleting a user. Only the admin and the authorized user can delete its account
      parameters:
        - name: user_id
          in: path
          description: 'Id of the user'
          required: true
          example: 1
          schema:
            type: integer
      responses:
        '204':
          description: Successfully deleted a user
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'    
        '5XX':
          description: Unexpected error.
    
  /users/{user_id}/images:
    get:
      security:
        - bearerAuth: []
      operationId: image.read_images
      summary: Reading a list  of images
      description: This helps in retreiving all the images related to a user.Only the admin and the authorized user can retrieve all the images
      parameters:
        - name: user_id
          in: path
          description: 'Id of the user'
          required: true
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: >-
            The images have been read
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: string
                      description: Id of the image
                    image:
                      type: string
                      description: name of the image
                    download_token:
                      type: string
                      description: download token for the image
                    user:
                      type: array
                      items:
                        type: integer
                        description: User Ids associated with the given image
                    timestamp:
                      type: string
                      description: Creation/Update timestamp of the image
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'    
        '5XX':
          description: Unexpected error.
    
    post:
      security:
        - bearerAuth: []
      operationId: image.upload
      summary: Uploading an image
      description: This helps in uploading a single image.Only the admin and the authorized user can upload an image
      parameters:
        - name: user_id
          in: path
          description: 'Id of the user'
          required: true
          example: 1
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                    type: string
                    format: binary
      responses:
        '201':
          description: >-
            The image has been uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Id of the image
                  image:
                    type: string
                    description: Image name stored
                  user:
                    type: array
                    description: Array of the user ids
                    items:
                      type: integer
                  timestamp:
                    type: string
                    description: Creation/Update timestamp of the image
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'    
        '5XX':
          description: Unexpected error.

  /users/{user_id}/images/{image_id}:
    get:
      security:
        - bearerAuth: []
      operationId: image.get_image
      summary: Get the download url for an image 
      description: This helps in getting the download url of a particular image by the authorized user and the admin.To check if the download url is working, copy and paste it in a new chrome tab and hit enter :)
      parameters:
        - name: user_id
          in: path
          description: 'Id of the user'
          required: true
          example: 1
          schema:
            type: integer
        - name: image_id
          in: path
          description: 'Id of the image'
          required: true
          example: 1
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: "https://someurl.com"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'    
        '5XX':
          description: Unexpected error.
          
    delete:
      security:
        - bearerAuth: []
      operationId: image.delete_image
      summary: Delete an image for a user
      description: This function helps in deleting an image by the admin and the authorized user
      parameters:
        - name: user_id
          in: path
          description: 'Id of the user'
          required: true
          example: 1
          schema:
            type: integer
        - name: image_id
          in: path
          description: 'Id of the image'
          required: true
          example: 1
          schema:
            type: integer
      responses:
        '204':
          description: Successfully deleted access to an image
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'    
        '5XX':
          description: Unexpected error.
          
          
  /users/{user_id}/images/{image_id}/access:
    post:
      security:
        - bearerAuth: []
      operationId: image.create_access
      summary: To provide access of an image to a user for other user's image
      description: This function helps one user(param = user_id) provide access of his image(param = image_id) to another user(whose email is provided in the request body).Only the admin and the authorized user can use this functionality
      parameters:
        - name: user_id
          in: path
          description: 'Id of the user'
          required: true
          example: 1
          schema:
            type: integer
        - name: image_id
          in: path
          description: 'Id of the image'
          required: true
          example: 1
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: email of the user
      responses:
        '201':
          description: >-
            Access has been provided to the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Id of the image
                  image:
                    type: string
                    description: Image name stored 
                  user:
                    type: array
                    description: Array of the users
                    items:
                      type: integer
                  timestamp:
                    type: string
                    description: Creation/Update timestamp of the image
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'    
        '409':
          $ref: '#/components/responses/Conflict' 
        '5XX':
          description: Unexpected error.

  /users/{user_id}/images/{image_id}/revoke:
    post:
      security:
        - bearerAuth: []
      operationId: image.revoke_access
      summary: To provide revoke access of an image to a user for other user's image
      description: This function helps one user(param = user_id) revoke access of his image(param = image_id) to another user(whose email is provided in the request body).Only the admin and the authorized user can use this functionality
      parameters:
        - name: user_id
          in: path
          description: 'Id of the user'
          required: true
          example: 1
          schema:
            type: integer
        - name: image_id
          in: path
          description: 'Id of the image'
          required: true
          example: 1
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: email of the user
      responses:
        '201':
          description: >-
             Revoke was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: Id of the image
                  image:
                    type: string
                    description: Image name stored 
                  user:
                    type: array
                    description: Array of the users
                    items:
                      type: integer
                  timestamp:
                    type: string
                    description: Creation/Update timestamp of the image
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'    
        '409':
          $ref: '#/components/responses/Conflict' 
        '5XX':
          description: Unexpected error.
   
components:
  schemas:
    GeneralError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

  responses:
    UnauthorizedError:
      description: Unauthorized
    NotFound:
      description: The specified resource was not found
    BadRequest:
      description: Illegal Inputs provided
    Forbidden:
      description: Forbidden User
    Conflict:
      description: Conflict
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
        
  securitySchemes:
    bearerAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT    
      x-bearerInfoFunc: auth.decode_token


